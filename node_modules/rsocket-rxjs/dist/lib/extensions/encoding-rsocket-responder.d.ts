import { Observable } from "rxjs";
import { BackpressureStrategy, RSocketResponder } from "../api/rsocket.api";
import { Payload } from "../core/protocol/payload";
import { DecodedPayload, EncodingRSocket } from "./encoding-rsocket-client";
export declare abstract class EncodingRSocketResponder implements RSocketResponder {
    readonly encodingRSocket: EncodingRSocket;
    constructor(encodingRSocket: EncodingRSocket);
    handleRequestStream(payload: Payload): {
        stream: Observable<Payload>;
        backpressureStrategy: BackpressureStrategy;
    };
    handleRequestResponse(payload: Payload): Observable<Payload>;
    handleFNF(payload: Payload): void;
    abstract handleDecodedRequestStream(payload: DecodedPayload): {
        stream: Observable<DecodedPayload>;
        backpressureStrategy: BackpressureStrategy;
    };
    abstract handleDecodedRequestResponse(payload: DecodedPayload): Observable<DecodedPayload>;
    abstract handleDecodedFireAndForget(payload: DecodedPayload): void;
}
