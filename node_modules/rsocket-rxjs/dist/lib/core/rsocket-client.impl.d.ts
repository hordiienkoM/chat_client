import { Observable } from "rxjs";
import { RSocket, RSocketResponder, RSocketState } from '../api/rsocket.api';
import { RSocketConfig } from "./config/rsocket-config";
import { Payload } from "./protocol/payload";
import { Transport } from "./transport/transport.api";
export declare class RSocketClient implements RSocket<Payload, Payload> {
    private readonly transport;
    readonly responder: RSocketResponder;
    private _config;
    private _state;
    private _incoming;
    private streamIdsHolder;
    private streamIdCounter;
    private $destroy;
    private _closedByUser;
    constructor(transport: Transport, responder: RSocketResponder, _config: RSocketConfig);
    setSetupConfig(config: RSocketConfig): void;
    getSetupConfig(): RSocketConfig;
    state(): Observable<RSocketState>;
    establish(): void;
    close(): Observable<void>;
    private incomingHandlerSetup;
    requestResponse(payload: Payload): Observable<Payload>;
    requestStream(payload: Payload, requester?: Observable<number>): Observable<Payload>;
    requestFNF(payload: Payload): void;
    private incomingRequestResponse;
    private incomingRequestStream;
    private incomingRequestFNF;
    private getNewStreamId;
    private connectionFailedObservable;
    private setupKeepaliveSupport;
}
