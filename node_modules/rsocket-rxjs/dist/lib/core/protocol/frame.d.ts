import { Payload } from './payload';
export declare enum FrameType {
    SETUP = 1,
    LEASE = 2,
    KEEPALIVE = 3,
    REQUEST_RESPONSE = 4,
    REQUEST_FNF = 5,
    REQUEST_STREAM = 6,
    REQUEST_CHANNEL = 7,
    REQUEST_N = 8,
    CANCEL = 9,
    PAYLOAD = 10,
    ERROR = 11,
    METADATA_PUSH = 12,
    RESUME = 13,
    RESUME_OK = 14,
    EXT = 63
}
export declare enum ErrorCode {
    RESERVED = 0,
    INVALID_SETUP = 1,
    UNSUPPORTED_SETUP = 2,
    REJECTED_SETUP = 3,
    REJECTED_RESUME = 4,
    CONNECTION_ERROR = 257,
    CONNECTION_CLOSE = 258,
    APPLICATION_ERROR = 513,
    REJECTED = 514,
    CANCELED = 515,
    INVALID = 516,
    RESERVED_EXT = 4294967295
}
/**
 * Flyweight around a buffer that gives access to frame type etc...
 */
export declare class Frame {
    readonly buffer: ArrayBufferView;
    private view;
    /**
     *
     * @param buffer Containing frame data
     */
    constructor(buffer: ArrayBufferView);
    streamId(): number;
    type(): FrameType;
    metadataPresent(): boolean;
    resumeEnable(): boolean;
    willHonorLease(): boolean;
    majorVersion(): number;
    minorVersion(): number;
    timeBetweenKeeaplive(): number;
    maxLifetime(): number;
    /**
     * Only meaningful if resume enabled!
     */
    tokenLength(): number;
    /**
     * Only meaningful if resume enabled!
     */
    resumeIdentificationToken(): Uint8Array;
    private getResumeEnableOffset;
    metadataMimeLength(): number;
    metadataMimeType(): Uint8Array;
    dataMimeLength(): number;
    dataMimeType(): Uint8Array;
    errorCode(): ErrorCode;
    timeToLive(): number;
    numberOfRequest(): number;
    respondWithKeepalive(): boolean;
    lastReceivedPosition(): number;
    fragmentFollows(): boolean;
    initialRequests(): number;
    isStreamComplete(): boolean;
    requests(): number;
    isNext(): boolean;
    metadataPushData(): Uint8Array;
    canBeIgnored(): boolean;
    extendedType(): number;
    metadataLength(offset: number): number;
    payload(): Payload | undefined;
}
