{"ast":null,"code":"/*\n * Copyright 2021-2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.regexp.flags.js\");\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Deserializer = exports.sizeOfFrame = exports.serializeFrame = exports.deserializeFrame = exports.serializeFrameWithLength = exports.deserializeFrames = exports.deserializeFrameWithLength = exports.writeUInt64BE = exports.readUInt64BE = exports.writeUInt24BE = exports.readUInt24BE = exports.MAX_VERSION = exports.MAX_TTL = exports.MAX_STREAM_ID = exports.MAX_RESUME_LENGTH = exports.MAX_REQUEST_N = exports.MAX_REQUEST_COUNT = exports.MAX_MIME_LENGTH = exports.MAX_METADATA_LENGTH = exports.MAX_LIFETIME = exports.MAX_KEEPALIVE = exports.MAX_CODE = exports.FRAME_TYPE_OFFFSET = exports.FLAGS_MASK = void 0;\nvar Frames_1 = require(\"./Frames\");\nexports.FLAGS_MASK = 0x3ff; // low 10 bits\nexports.FRAME_TYPE_OFFFSET = 10; // frame type is offset 10 bytes within the uint16 containing type + flags\nexports.MAX_CODE = 0x7fffffff; // uint31\nexports.MAX_KEEPALIVE = 0x7fffffff; // uint31\nexports.MAX_LIFETIME = 0x7fffffff; // uint31\nexports.MAX_METADATA_LENGTH = 0xffffff; // uint24\nexports.MAX_MIME_LENGTH = 0xff; // int8\nexports.MAX_REQUEST_COUNT = 0x7fffffff; // uint31\nexports.MAX_REQUEST_N = 0x7fffffff; // uint31\nexports.MAX_RESUME_LENGTH = 0xffff; // uint16\nexports.MAX_STREAM_ID = 0x7fffffff; // uint31\nexports.MAX_TTL = 0x7fffffff; // uint31\nexports.MAX_VERSION = 0xffff; // uint16\n/**\n * Mimimum value that would overflow bitwise operators (2^32).\n */\nvar BITWISE_OVERFLOW = 0x100000000;\n/**\n * Read a uint24 from a buffer starting at the given offset.\n */\nfunction readUInt24BE(buffer, offset) {\n  var val1 = buffer.readUInt8(offset) << 16;\n  var val2 = buffer.readUInt8(offset + 1) << 8;\n  var val3 = buffer.readUInt8(offset + 2);\n  return val1 | val2 | val3;\n}\nexports.readUInt24BE = readUInt24BE;\n/**\n * Writes a uint24 to a buffer starting at the given offset, returning the\n * offset of the next byte.\n */\nfunction writeUInt24BE(buffer, value, offset) {\n  offset = buffer.writeUInt8(value >>> 16, offset); // 3rd byte\n  offset = buffer.writeUInt8(value >>> 8 & 0xff, offset); // 2nd byte\n  return buffer.writeUInt8(value & 0xff, offset); // 1st byte\n}\n\nexports.writeUInt24BE = writeUInt24BE;\n/**\n * Read a uint64 (technically supports up to 53 bits per JS number\n * representation).\n */\nfunction readUInt64BE(buffer, offset) {\n  var high = buffer.readUInt32BE(offset);\n  var low = buffer.readUInt32BE(offset + 4);\n  return high * BITWISE_OVERFLOW + low;\n}\nexports.readUInt64BE = readUInt64BE;\n/**\n * Write a uint64 (technically supports up to 53 bits per JS number\n * representation).\n */\nfunction writeUInt64BE(buffer, value, offset) {\n  var high = value / BITWISE_OVERFLOW | 0;\n  var low = value % BITWISE_OVERFLOW;\n  offset = buffer.writeUInt32BE(high, offset); // first half of uint64\n  return buffer.writeUInt32BE(low, offset); // second half of uint64\n}\n\nexports.writeUInt64BE = writeUInt64BE;\n/**\n * Frame header is:\n * - stream id (uint32 = 4)\n * - type + flags (uint 16 = 2)\n */\nvar FRAME_HEADER_SIZE = 6;\n/**\n * Size of frame length and metadata length fields.\n */\nvar UINT24_SIZE = 3;\n/**\n * Reads a frame from a buffer that is prefixed with the frame length.\n */\nfunction deserializeFrameWithLength(buffer) {\n  var frameLength = readUInt24BE(buffer, 0);\n  return deserializeFrame(buffer.slice(UINT24_SIZE, UINT24_SIZE + frameLength));\n}\nexports.deserializeFrameWithLength = deserializeFrameWithLength;\n/**\n * Given a buffer that may contain zero or more length-prefixed frames followed\n * by zero or more bytes of a (partial) subsequent frame, returns an array of\n * the frames and an int representing the buffer offset.\n */\nfunction deserializeFrames(buffer) {\n  var offset, frameLength, frameStart, frameEnd, frameBuffer, frame;\n  return __generator(this, function (_a) {\n    switch (_a.label) {\n      case 0:\n        offset = 0;\n        _a.label = 1;\n      case 1:\n        if (!(offset + UINT24_SIZE < buffer.length)) return [3 /*break*/, 3];\n        frameLength = readUInt24BE(buffer, offset);\n        frameStart = offset + UINT24_SIZE;\n        frameEnd = frameStart + frameLength;\n        if (frameEnd > buffer.length) {\n          // not all bytes of next frame received\n          return [3 /*break*/, 3];\n        }\n        frameBuffer = buffer.slice(frameStart, frameEnd);\n        frame = deserializeFrame(frameBuffer);\n        offset = frameEnd;\n        return [4 /*yield*/, [frame, offset]];\n      case 2:\n        _a.sent();\n        return [3 /*break*/, 1];\n      case 3:\n        return [2 /*return*/];\n    }\n  });\n}\n\nexports.deserializeFrames = deserializeFrames;\n/**\n * Writes a frame to a buffer with a length prefix.\n */\nfunction serializeFrameWithLength(frame) {\n  var buffer = serializeFrame(frame);\n  var lengthPrefixed = Buffer.allocUnsafe(buffer.length + UINT24_SIZE);\n  writeUInt24BE(lengthPrefixed, buffer.length, 0);\n  buffer.copy(lengthPrefixed, UINT24_SIZE);\n  return lengthPrefixed;\n}\nexports.serializeFrameWithLength = serializeFrameWithLength;\n/**\n * Read a frame from the buffer.\n */\nfunction deserializeFrame(buffer) {\n  var offset = 0;\n  var streamId = buffer.readInt32BE(offset);\n  offset += 4;\n  // invariant(\n  //   streamId >= 0,\n  //   'RSocketBinaryFraming: Invalid frame, expected a positive stream id, got `%s.',\n  //   streamId,\n  // );\n  var typeAndFlags = buffer.readUInt16BE(offset);\n  offset += 2;\n  var type = typeAndFlags >>> exports.FRAME_TYPE_OFFFSET; // keep highest 6 bits\n  var flags = typeAndFlags & exports.FLAGS_MASK; // keep lowest 10 bits\n  switch (type) {\n    case Frames_1.FrameTypes.SETUP:\n      return deserializeSetupFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.PAYLOAD:\n      return deserializePayloadFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.ERROR:\n      return deserializeErrorFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.KEEPALIVE:\n      return deserializeKeepAliveFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.REQUEST_FNF:\n      return deserializeRequestFnfFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.REQUEST_RESPONSE:\n      return deserializeRequestResponseFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.REQUEST_STREAM:\n      return deserializeRequestStreamFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.REQUEST_CHANNEL:\n      return deserializeRequestChannelFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.METADATA_PUSH:\n      return deserializeMetadataPushFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.REQUEST_N:\n      return deserializeRequestNFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.RESUME:\n      return deserializeResumeFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.RESUME_OK:\n      return deserializeResumeOkFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.CANCEL:\n      return deserializeCancelFrame(buffer, streamId, flags);\n    case Frames_1.FrameTypes.LEASE:\n      return deserializeLeaseFrame(buffer, streamId, flags);\n    default:\n    // invariant(\n    //   false,\n    //   \"RSocketBinaryFraming: Unsupported frame type `%s`.\",\n    //   getFrameTypeName(type)\n    // );\n  }\n}\n\nexports.deserializeFrame = deserializeFrame;\n/**\n * Convert the frame to a (binary) buffer.\n */\nfunction serializeFrame(frame) {\n  switch (frame.type) {\n    case Frames_1.FrameTypes.SETUP:\n      return serializeSetupFrame(frame);\n    case Frames_1.FrameTypes.PAYLOAD:\n      return serializePayloadFrame(frame);\n    case Frames_1.FrameTypes.ERROR:\n      return serializeErrorFrame(frame);\n    case Frames_1.FrameTypes.KEEPALIVE:\n      return serializeKeepAliveFrame(frame);\n    case Frames_1.FrameTypes.REQUEST_FNF:\n    case Frames_1.FrameTypes.REQUEST_RESPONSE:\n      return serializeRequestFrame(frame);\n    case Frames_1.FrameTypes.REQUEST_STREAM:\n    case Frames_1.FrameTypes.REQUEST_CHANNEL:\n      return serializeRequestManyFrame(frame);\n    case Frames_1.FrameTypes.METADATA_PUSH:\n      return serializeMetadataPushFrame(frame);\n    case Frames_1.FrameTypes.REQUEST_N:\n      return serializeRequestNFrame(frame);\n    case Frames_1.FrameTypes.RESUME:\n      return serializeResumeFrame(frame);\n    case Frames_1.FrameTypes.RESUME_OK:\n      return serializeResumeOkFrame(frame);\n    case Frames_1.FrameTypes.CANCEL:\n      return serializeCancelFrame(frame);\n    case Frames_1.FrameTypes.LEASE:\n      return serializeLeaseFrame(frame);\n    default:\n    // invariant(\n    //   false,\n    //   \"RSocketBinaryFraming: Unsupported frame type `%s`.\",\n    //   getFrameTypeName(frame.type)\n    // );\n  }\n}\n\nexports.serializeFrame = serializeFrame;\n/**\n * Byte size of frame without size prefix\n */\nfunction sizeOfFrame(frame) {\n  switch (frame.type) {\n    case Frames_1.FrameTypes.SETUP:\n      return sizeOfSetupFrame(frame);\n    case Frames_1.FrameTypes.PAYLOAD:\n      return sizeOfPayloadFrame(frame);\n    case Frames_1.FrameTypes.ERROR:\n      return sizeOfErrorFrame(frame);\n    case Frames_1.FrameTypes.KEEPALIVE:\n      return sizeOfKeepAliveFrame(frame);\n    case Frames_1.FrameTypes.REQUEST_FNF:\n    case Frames_1.FrameTypes.REQUEST_RESPONSE:\n      return sizeOfRequestFrame(frame);\n    case Frames_1.FrameTypes.REQUEST_STREAM:\n    case Frames_1.FrameTypes.REQUEST_CHANNEL:\n      return sizeOfRequestManyFrame(frame);\n    case Frames_1.FrameTypes.METADATA_PUSH:\n      return sizeOfMetadataPushFrame(frame);\n    case Frames_1.FrameTypes.REQUEST_N:\n      return sizeOfRequestNFrame(frame);\n    case Frames_1.FrameTypes.RESUME:\n      return sizeOfResumeFrame(frame);\n    case Frames_1.FrameTypes.RESUME_OK:\n      return sizeOfResumeOkFrame(frame);\n    case Frames_1.FrameTypes.CANCEL:\n      return sizeOfCancelFrame(frame);\n    case Frames_1.FrameTypes.LEASE:\n      return sizeOfLeaseFrame(frame);\n    default:\n    // invariant(\n    //   false,\n    //   \"RSocketBinaryFraming: Unsupported frame type `%s`.\",\n    //   getFrameTypeName(frame.type)\n    // );\n  }\n}\n\nexports.sizeOfFrame = sizeOfFrame;\n/**\n * Writes a SETUP frame into a new buffer and returns it.\n *\n * Prefix size is:\n * - version (2x uint16 = 4)\n * - keepalive (uint32 = 4)\n * - lifetime (uint32 = 4)\n * - mime lengths (2x uint8 = 2)\n */\nvar SETUP_FIXED_SIZE = 14;\nvar RESUME_TOKEN_LENGTH_SIZE = 2;\nfunction serializeSetupFrame(frame) {\n  var resumeTokenLength = frame.resumeToken != null ? frame.resumeToken.byteLength : 0;\n  var metadataMimeTypeLength = frame.metadataMimeType != null ? Buffer.byteLength(frame.metadataMimeType, \"ascii\") : 0;\n  var dataMimeTypeLength = frame.dataMimeType != null ? Buffer.byteLength(frame.dataMimeType, \"ascii\") : 0;\n  var payloadLength = getPayloadLength(frame);\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + SETUP_FIXED_SIZE + (\n  //\n  resumeTokenLength ? RESUME_TOKEN_LENGTH_SIZE + resumeTokenLength : 0) + metadataMimeTypeLength + dataMimeTypeLength + payloadLength);\n  var offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt16BE(frame.majorVersion, offset);\n  offset = buffer.writeUInt16BE(frame.minorVersion, offset);\n  offset = buffer.writeUInt32BE(frame.keepAlive, offset);\n  offset = buffer.writeUInt32BE(frame.lifetime, offset);\n  if (frame.flags & Frames_1.Flags.RESUME_ENABLE) {\n    offset = buffer.writeUInt16BE(resumeTokenLength, offset);\n    if (frame.resumeToken != null) {\n      offset += frame.resumeToken.copy(buffer, offset);\n    }\n  }\n  offset = buffer.writeUInt8(metadataMimeTypeLength, offset);\n  if (frame.metadataMimeType != null) {\n    offset += buffer.write(frame.metadataMimeType, offset, offset + metadataMimeTypeLength, \"ascii\");\n  }\n  offset = buffer.writeUInt8(dataMimeTypeLength, offset);\n  if (frame.dataMimeType != null) {\n    offset += buffer.write(frame.dataMimeType, offset, offset + dataMimeTypeLength, \"ascii\");\n  }\n  writePayload(frame, buffer, offset);\n  return buffer;\n}\nfunction sizeOfSetupFrame(frame) {\n  var resumeTokenLength = frame.resumeToken != null ? frame.resumeToken.byteLength : 0;\n  var metadataMimeTypeLength = frame.metadataMimeType != null ? Buffer.byteLength(frame.metadataMimeType, \"ascii\") : 0;\n  var dataMimeTypeLength = frame.dataMimeType != null ? Buffer.byteLength(frame.dataMimeType, \"ascii\") : 0;\n  var payloadLength = getPayloadLength(frame);\n  return FRAME_HEADER_SIZE + SETUP_FIXED_SIZE + (\n  //\n  resumeTokenLength ? RESUME_TOKEN_LENGTH_SIZE + resumeTokenLength : 0) + metadataMimeTypeLength + dataMimeTypeLength + payloadLength;\n}\n/**\n * Reads a SETUP frame from the buffer and returns it.\n */\nfunction deserializeSetupFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId === 0,\n  //   'RSocketBinaryFraming: Invalid SETUP frame, expected stream id to be 0.',\n  // );\n  var length = buffer.length;\n  var offset = FRAME_HEADER_SIZE;\n  var majorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n  var minorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n  var keepAlive = buffer.readInt32BE(offset);\n  offset += 4;\n  // invariant(\n  //   keepAlive >= 0 && keepAlive <= MAX_KEEPALIVE,\n  //   'RSocketBinaryFraming: Invalid SETUP frame, expected keepAlive to be ' +\n  //     '>= 0 and <= %s. Got `%s`.',\n  //   MAX_KEEPALIVE,\n  //   keepAlive,\n  // );\n  var lifetime = buffer.readInt32BE(offset);\n  offset += 4;\n  // invariant(\n  //   lifetime >= 0 && lifetime <= MAX_LIFETIME,\n  //   'RSocketBinaryFraming: Invalid SETUP frame, expected lifetime to be ' +\n  //     '>= 0 and <= %s. Got `%s`.',\n  //   MAX_LIFETIME,\n  //   lifetime,\n  // );\n  var resumeToken = null;\n  if (flags & Frames_1.Flags.RESUME_ENABLE) {\n    var resumeTokenLength = buffer.readInt16BE(offset);\n    offset += 2;\n    // invariant(\n    //   resumeTokenLength >= 0 && resumeTokenLength <= MAX_RESUME_LENGTH,\n    //   'RSocketBinaryFraming: Invalid SETUP frame, expected resumeToken length ' +\n    //     'to be >= 0 and <= %s. Got `%s`.',\n    //   MAX_RESUME_LENGTH,\n    //   resumeTokenLength,\n    // );\n    resumeToken = buffer.slice(offset, offset + resumeTokenLength);\n    offset += resumeTokenLength;\n  }\n  var metadataMimeTypeLength = buffer.readUInt8(offset);\n  offset += 1;\n  var metadataMimeType = buffer.toString(\"ascii\", offset, offset + metadataMimeTypeLength);\n  offset += metadataMimeTypeLength;\n  var dataMimeTypeLength = buffer.readUInt8(offset);\n  offset += 1;\n  var dataMimeType = buffer.toString(\"ascii\", offset, offset + dataMimeTypeLength);\n  offset += dataMimeTypeLength;\n  var frame = {\n    data: null,\n    dataMimeType: dataMimeType,\n    flags: flags,\n    keepAlive: keepAlive,\n    lifetime: lifetime,\n    majorVersion: majorVersion,\n    metadata: null,\n    metadataMimeType: metadataMimeType,\n    minorVersion: minorVersion,\n    resumeToken: resumeToken,\n    // streamId,\n    streamId: 0,\n    type: Frames_1.FrameTypes.SETUP\n  };\n  readPayload(buffer, frame, offset);\n  return frame;\n}\n/**\n * Writes an ERROR frame into a new buffer and returns it.\n *\n * Prefix size is for the error code (uint32 = 4).\n */\nvar ERROR_FIXED_SIZE = 4;\nfunction serializeErrorFrame(frame) {\n  var messageLength = frame.message != null ? Buffer.byteLength(frame.message, \"utf8\") : 0;\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + ERROR_FIXED_SIZE + messageLength);\n  var offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt32BE(frame.code, offset);\n  if (frame.message != null) {\n    buffer.write(frame.message, offset, offset + messageLength, \"utf8\");\n  }\n  return buffer;\n}\nfunction sizeOfErrorFrame(frame) {\n  var messageLength = frame.message != null ? Buffer.byteLength(frame.message, \"utf8\") : 0;\n  return FRAME_HEADER_SIZE + ERROR_FIXED_SIZE + messageLength;\n}\n/**\n * Reads an ERROR frame from the buffer and returns it.\n */\nfunction deserializeErrorFrame(buffer, streamId, flags) {\n  var length = buffer.length;\n  var offset = FRAME_HEADER_SIZE;\n  var code = buffer.readInt32BE(offset);\n  offset += 4;\n  // invariant(\n  //   code >= 0 && code <= MAX_CODE,\n  //   \"RSocketBinaryFraming: Invalid ERROR frame, expected code to be >= 0 and <= %s. Got `%s`.\",\n  //   MAX_CODE,\n  //   code\n  // );\n  var messageLength = buffer.length - offset;\n  var message = \"\";\n  if (messageLength > 0) {\n    message = buffer.toString(\"utf8\", offset, offset + messageLength);\n    offset += messageLength;\n  }\n  return {\n    code: code,\n    flags: flags,\n    message: message,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.ERROR\n  };\n}\n/**\n * Writes a KEEPALIVE frame into a new buffer and returns it.\n *\n * Prefix size is for the last received position (uint64 = 8).\n */\nvar KEEPALIVE_FIXED_SIZE = 8;\nfunction serializeKeepAliveFrame(frame) {\n  var dataLength = frame.data != null ? frame.data.byteLength : 0;\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + KEEPALIVE_FIXED_SIZE + dataLength);\n  var offset = writeHeader(frame, buffer);\n  offset = writeUInt64BE(buffer, frame.lastReceivedPosition, offset);\n  if (frame.data != null) {\n    frame.data.copy(buffer, offset);\n  }\n  return buffer;\n}\nfunction sizeOfKeepAliveFrame(frame) {\n  var dataLength = frame.data != null ? frame.data.byteLength : 0;\n  return FRAME_HEADER_SIZE + KEEPALIVE_FIXED_SIZE + dataLength;\n}\n/**\n * Reads a KEEPALIVE frame from the buffer and returns it.\n */\nfunction deserializeKeepAliveFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId === 0,\n  //   \"RSocketBinaryFraming: Invalid KEEPALIVE frame, expected stream id to be 0.\"\n  // );\n  var length = buffer.length;\n  var offset = FRAME_HEADER_SIZE;\n  var lastReceivedPosition = readUInt64BE(buffer, offset);\n  offset += 8;\n  var data = null;\n  if (offset < buffer.length) {\n    data = buffer.slice(offset, buffer.length);\n  }\n  return {\n    data: data,\n    flags: flags,\n    lastReceivedPosition: lastReceivedPosition,\n    // streamId,\n    streamId: 0,\n    type: Frames_1.FrameTypes.KEEPALIVE\n  };\n}\n/**\n * Writes a LEASE frame into a new buffer and returns it.\n *\n * Prefix size is for the ttl (uint32) and requestcount (uint32).\n */\nvar LEASE_FIXED_SIZE = 8;\nfunction serializeLeaseFrame(frame) {\n  var metaLength = frame.metadata != null ? frame.metadata.byteLength : 0;\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + LEASE_FIXED_SIZE + metaLength);\n  var offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt32BE(frame.ttl, offset);\n  offset = buffer.writeUInt32BE(frame.requestCount, offset);\n  if (frame.metadata != null) {\n    frame.metadata.copy(buffer, offset);\n  }\n  return buffer;\n}\nfunction sizeOfLeaseFrame(frame) {\n  var metaLength = frame.metadata != null ? frame.metadata.byteLength : 0;\n  return FRAME_HEADER_SIZE + LEASE_FIXED_SIZE + metaLength;\n}\n/**\n * Reads a LEASE frame from the buffer and returns it.\n */\nfunction deserializeLeaseFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId === 0,\n  //   \"RSocketBinaryFraming: Invalid LEASE frame, expected stream id to be 0.\"\n  // );\n  // const length = buffer.length;\n  var offset = FRAME_HEADER_SIZE;\n  var ttl = buffer.readUInt32BE(offset);\n  offset += 4;\n  var requestCount = buffer.readUInt32BE(offset);\n  offset += 4;\n  var metadata = null;\n  if (offset < buffer.length) {\n    metadata = buffer.slice(offset, buffer.length);\n  }\n  return {\n    flags: flags,\n    metadata: metadata,\n    requestCount: requestCount,\n    // streamId,\n    streamId: 0,\n    ttl: ttl,\n    type: Frames_1.FrameTypes.LEASE\n  };\n}\n/**\n * Writes a REQUEST_FNF or REQUEST_RESPONSE frame to a new buffer and returns\n * it.\n *\n * Note that these frames have the same shape and only differ in their type.\n */\nfunction serializeRequestFrame(frame) {\n  var payloadLength = getPayloadLength(frame);\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + payloadLength);\n  var offset = writeHeader(frame, buffer);\n  writePayload(frame, buffer, offset);\n  return buffer;\n}\nfunction sizeOfRequestFrame(frame) {\n  var payloadLength = getPayloadLength(frame);\n  return FRAME_HEADER_SIZE + payloadLength;\n}\n/**\n * Writes a METADATA_PUSH frame to a new buffer and returns\n * it.\n */\nfunction serializeMetadataPushFrame(frame) {\n  var metadata = frame.metadata;\n  if (metadata != null) {\n    var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + metadata.byteLength);\n    var offset = writeHeader(frame, buffer);\n    metadata.copy(buffer, offset);\n    return buffer;\n  } else {\n    var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE);\n    writeHeader(frame, buffer);\n    return buffer;\n  }\n}\nfunction sizeOfMetadataPushFrame(frame) {\n  return FRAME_HEADER_SIZE + (frame.metadata != null ? frame.metadata.byteLength : 0);\n}\nfunction deserializeRequestFnfFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId > 0,\n  //   \"RSocketBinaryFraming: Invalid REQUEST_FNF frame, expected stream id to be > 0.\"\n  // );\n  var length = buffer.length;\n  var frame = {\n    data: null,\n    flags: flags,\n    // length,\n    metadata: null,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.REQUEST_FNF\n  };\n  readPayload(buffer, frame, FRAME_HEADER_SIZE);\n  return frame;\n}\nfunction deserializeRequestResponseFrame(buffer, streamId, flags) {\n  // invariant(\n  // streamId > 0,\n  // \"RSocketBinaryFraming: Invalid REQUEST_RESPONSE frame, expected stream id to be > 0.\"\n  // );\n  // const length = buffer.length;\n  var frame = {\n    data: null,\n    flags: flags,\n    // length,\n    metadata: null,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.REQUEST_RESPONSE\n  };\n  readPayload(buffer, frame, FRAME_HEADER_SIZE);\n  return frame;\n}\nfunction deserializeMetadataPushFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId === 0,\n  //   \"RSocketBinaryFraming: Invalid METADATA_PUSH frame, expected stream id to be 0.\"\n  // );\n  // const length = buffer.length;\n  return {\n    flags: flags,\n    // length,\n    metadata: length === FRAME_HEADER_SIZE ? null : buffer.slice(FRAME_HEADER_SIZE, length),\n    // streamId,\n    streamId: 0,\n    type: Frames_1.FrameTypes.METADATA_PUSH\n  };\n}\n/**\n * Writes a REQUEST_STREAM or REQUEST_CHANNEL frame to a new buffer and returns\n * it.\n *\n * Note that these frames have the same shape and only differ in their type.\n *\n * Prefix size is for requestN (uint32 = 4).\n */\nvar REQUEST_MANY_HEADER = 4;\nfunction serializeRequestManyFrame(frame) {\n  var payloadLength = getPayloadLength(frame);\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + REQUEST_MANY_HEADER + payloadLength);\n  var offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt32BE(frame.requestN, offset);\n  writePayload(frame, buffer, offset);\n  return buffer;\n}\nfunction sizeOfRequestManyFrame(frame) {\n  var payloadLength = getPayloadLength(frame);\n  return FRAME_HEADER_SIZE + REQUEST_MANY_HEADER + payloadLength;\n}\nfunction deserializeRequestStreamFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId > 0,\n  //   \"RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected stream id to be > 0.\"\n  // );\n  var length = buffer.length;\n  var offset = FRAME_HEADER_SIZE;\n  var requestN = buffer.readInt32BE(offset);\n  offset += 4;\n  // invariant(\n  //   requestN > 0,\n  //   \"RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected requestN to be > 0, got `%s`.\",\n  //   requestN\n  // );\n  var frame = {\n    data: null,\n    flags: flags,\n    // length,\n    metadata: null,\n    requestN: requestN,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.REQUEST_STREAM\n  };\n  readPayload(buffer, frame, offset);\n  return frame;\n}\nfunction deserializeRequestChannelFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId > 0,\n  //   \"RSocketBinaryFraming: Invalid REQUEST_CHANNEL frame, expected stream id to be > 0.\"\n  // );\n  var length = buffer.length;\n  var offset = FRAME_HEADER_SIZE;\n  var requestN = buffer.readInt32BE(offset);\n  offset += 4;\n  // invariant(\n  //   requestN > 0,\n  //   \"RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected requestN to be > 0, got `%s`.\",\n  //   requestN\n  // );\n  var frame = {\n    data: null,\n    flags: flags,\n    // length,\n    metadata: null,\n    requestN: requestN,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.REQUEST_CHANNEL\n  };\n  readPayload(buffer, frame, offset);\n  return frame;\n}\n/**\n * Writes a REQUEST_N frame to a new buffer and returns it.\n *\n * Prefix size is for requestN (uint32 = 4).\n */\nvar REQUEST_N_HEADER = 4;\nfunction serializeRequestNFrame(frame) {\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + REQUEST_N_HEADER);\n  var offset = writeHeader(frame, buffer);\n  buffer.writeUInt32BE(frame.requestN, offset);\n  return buffer;\n}\nfunction sizeOfRequestNFrame(frame) {\n  return FRAME_HEADER_SIZE + REQUEST_N_HEADER;\n}\nfunction deserializeRequestNFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId > 0,\n  //   \"RSocketBinaryFraming: Invalid REQUEST_N frame, expected stream id to be > 0.\"\n  // );\n  var length = buffer.length;\n  var requestN = buffer.readInt32BE(FRAME_HEADER_SIZE);\n  // invariant(\n  //   requestN > 0,\n  //   \"RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected requestN to be > 0, got `%s`.\",\n  //   requestN\n  // );\n  return {\n    flags: flags,\n    // length,\n    requestN: requestN,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.REQUEST_N\n  };\n}\n/**\n * Writes a CANCEL frame to a new buffer and returns it.\n */\nfunction serializeCancelFrame(frame) {\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE);\n  writeHeader(frame, buffer);\n  return buffer;\n}\nfunction sizeOfCancelFrame(frame) {\n  return FRAME_HEADER_SIZE;\n}\nfunction deserializeCancelFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId > 0,\n  //   \"RSocketBinaryFraming: Invalid CANCEL frame, expected stream id to be > 0.\"\n  // );\n  var length = buffer.length;\n  return {\n    flags: flags,\n    // length,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.CANCEL\n  };\n}\n/**\n * Writes a PAYLOAD frame to a new buffer and returns it.\n */\nfunction serializePayloadFrame(frame) {\n  var payloadLength = getPayloadLength(frame);\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + payloadLength);\n  var offset = writeHeader(frame, buffer);\n  writePayload(frame, buffer, offset);\n  return buffer;\n}\nfunction sizeOfPayloadFrame(frame) {\n  var payloadLength = getPayloadLength(frame);\n  return FRAME_HEADER_SIZE + payloadLength;\n}\nfunction deserializePayloadFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId > 0,\n  //   \"RSocketBinaryFraming: Invalid PAYLOAD frame, expected stream id to be > 0.\"\n  // );\n  var length = buffer.length;\n  var frame = {\n    data: null,\n    flags: flags,\n    // length,\n    metadata: null,\n    streamId: streamId,\n    type: Frames_1.FrameTypes.PAYLOAD\n  };\n  readPayload(buffer, frame, FRAME_HEADER_SIZE);\n  return frame;\n}\n/**\n * Writes a RESUME frame into a new buffer and returns it.\n *\n * Fixed size is:\n * - major version (uint16 = 2)\n * - minor version (uint16 = 2)\n * - token length (uint16 = 2)\n * - client position (uint64 = 8)\n * - server position (uint64 = 8)\n */\nvar RESUME_FIXED_SIZE = 22;\nfunction serializeResumeFrame(frame) {\n  var resumeTokenLength = frame.resumeToken.byteLength;\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + RESUME_FIXED_SIZE + resumeTokenLength);\n  var offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt16BE(frame.majorVersion, offset);\n  offset = buffer.writeUInt16BE(frame.minorVersion, offset);\n  offset = buffer.writeUInt16BE(resumeTokenLength, offset);\n  offset += frame.resumeToken.copy(buffer, offset);\n  offset = writeUInt64BE(buffer, frame.serverPosition, offset);\n  writeUInt64BE(buffer, frame.clientPosition, offset);\n  return buffer;\n}\nfunction sizeOfResumeFrame(frame) {\n  var resumeTokenLength = frame.resumeToken.byteLength;\n  return FRAME_HEADER_SIZE + RESUME_FIXED_SIZE + resumeTokenLength;\n}\nfunction deserializeResumeFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId === 0,\n  //   \"RSocketBinaryFraming: Invalid RESUME frame, expected stream id to be 0.\"\n  // );\n  var length = buffer.length;\n  var offset = FRAME_HEADER_SIZE;\n  var majorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n  var minorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n  var resumeTokenLength = buffer.readInt16BE(offset);\n  offset += 2;\n  // invariant(\n  //   resumeTokenLength >= 0 && resumeTokenLength <= MAX_RESUME_LENGTH,\n  //   \"RSocketBinaryFraming: Invalid SETUP frame, expected resumeToken length \" +\n  //     \"to be >= 0 and <= %s. Got `%s`.\",\n  //   MAX_RESUME_LENGTH,\n  //   resumeTokenLength\n  // );\n  var resumeToken = buffer.slice(offset, offset + resumeTokenLength);\n  offset += resumeTokenLength;\n  var serverPosition = readUInt64BE(buffer, offset);\n  offset += 8;\n  var clientPosition = readUInt64BE(buffer, offset);\n  offset += 8;\n  return {\n    clientPosition: clientPosition,\n    flags: flags,\n    // length,\n    majorVersion: majorVersion,\n    minorVersion: minorVersion,\n    resumeToken: resumeToken,\n    serverPosition: serverPosition,\n    // streamId,\n    streamId: 0,\n    type: Frames_1.FrameTypes.RESUME\n  };\n}\n/**\n * Writes a RESUME_OK frame into a new buffer and returns it.\n *\n * Fixed size is:\n * - client position (uint64 = 8)\n */\nvar RESUME_OK_FIXED_SIZE = 8;\nfunction serializeResumeOkFrame(frame) {\n  var buffer = Buffer.allocUnsafe(FRAME_HEADER_SIZE + RESUME_OK_FIXED_SIZE);\n  var offset = writeHeader(frame, buffer);\n  writeUInt64BE(buffer, frame.clientPosition, offset);\n  return buffer;\n}\nfunction sizeOfResumeOkFrame(frame) {\n  return FRAME_HEADER_SIZE + RESUME_OK_FIXED_SIZE;\n}\nfunction deserializeResumeOkFrame(buffer, streamId, flags) {\n  // invariant(\n  //   streamId === 0,\n  //   \"RSocketBinaryFraming: Invalid RESUME frame, expected stream id to be 0.\"\n  // );\n  var length = buffer.length;\n  var clientPosition = readUInt64BE(buffer, FRAME_HEADER_SIZE);\n  return {\n    clientPosition: clientPosition,\n    flags: flags,\n    // length,\n    // streamId,\n    streamId: 0,\n    type: Frames_1.FrameTypes.RESUME_OK\n  };\n}\n/**\n * Write the header of the frame into the buffer.\n */\nfunction writeHeader(frame, buffer) {\n  var offset = buffer.writeInt32BE(frame.streamId, 0);\n  // shift frame to high 6 bits, extract lowest 10 bits from flags\n  return buffer.writeUInt16BE(frame.type << exports.FRAME_TYPE_OFFFSET | frame.flags & exports.FLAGS_MASK, offset);\n}\n/**\n * Determine the length of the payload section of a frame. Only applies to\n * frame types that MAY have both metadata and data.\n */\nfunction getPayloadLength(frame) {\n  var payloadLength = 0;\n  if (frame.data != null) {\n    payloadLength += frame.data.byteLength;\n  }\n  if (Frames_1.Flags.hasMetadata(frame.flags)) {\n    payloadLength += UINT24_SIZE;\n    if (frame.metadata != null) {\n      payloadLength += frame.metadata.byteLength;\n    }\n  }\n  return payloadLength;\n}\n/**\n * Write the payload of a frame into the given buffer. Only applies to frame\n * types that MAY have both metadata and data.\n */\nfunction writePayload(frame, buffer, offset) {\n  if (Frames_1.Flags.hasMetadata(frame.flags)) {\n    if (frame.metadata != null) {\n      var metaLength = frame.metadata.byteLength;\n      offset = writeUInt24BE(buffer, metaLength, offset);\n      offset += frame.metadata.copy(buffer, offset);\n    } else {\n      offset = writeUInt24BE(buffer, 0, offset);\n    }\n  }\n  if (frame.data != null) {\n    frame.data.copy(buffer, offset);\n  }\n}\n/**\n * Read the payload from a buffer and write it into the frame. Only applies to\n * frame types that MAY have both metadata and data.\n */\nfunction readPayload(buffer, frame, offset) {\n  if (Frames_1.Flags.hasMetadata(frame.flags)) {\n    var metaLength = readUInt24BE(buffer, offset);\n    offset += UINT24_SIZE;\n    if (metaLength > 0) {\n      frame.metadata = buffer.slice(offset, offset + metaLength);\n      offset += metaLength;\n    }\n  }\n  if (offset < buffer.length) {\n    frame.data = buffer.slice(offset, buffer.length);\n  }\n}\n// exported as class to facilitate testing\nvar Deserializer = /** @class */function () {\n  function Deserializer() {}\n  /**\n   * Read a frame from the buffer.\n   */\n  Deserializer.prototype.deserializeFrame = function (buffer) {\n    return deserializeFrame(buffer);\n  };\n  /**\n   * Reads a frame from a buffer that is prefixed with the frame length.\n   */\n  Deserializer.prototype.deserializeFrameWithLength = function (buffer) {\n    return deserializeFrameWithLength(buffer);\n  };\n  /**\n   * Given a buffer that may contain zero or more length-prefixed frames followed\n   * by zero or more bytes of a (partial) subsequent frame, returns an array of\n   * the frames and a int representing the buffer offset.\n   */\n  Deserializer.prototype.deserializeFrames = function (buffer) {\n    return deserializeFrames(buffer);\n  };\n  return Deserializer;\n}();\nexports.Deserializer = Deserializer;","map":{"version":3,"names":["require","Frames_1","exports","FLAGS_MASK","FRAME_TYPE_OFFFSET","MAX_CODE","MAX_KEEPALIVE","MAX_LIFETIME","MAX_METADATA_LENGTH","MAX_MIME_LENGTH","MAX_REQUEST_COUNT","MAX_REQUEST_N","MAX_RESUME_LENGTH","MAX_STREAM_ID","MAX_TTL","MAX_VERSION","BITWISE_OVERFLOW","readUInt24BE","buffer","offset","val1","readUInt8","val2","val3","writeUInt24BE","value","writeUInt8","readUInt64BE","high","readUInt32BE","low","writeUInt64BE","writeUInt32BE","FRAME_HEADER_SIZE","UINT24_SIZE","deserializeFrameWithLength","frameLength","deserializeFrame","slice","deserializeFrames","length","frameStart","frameEnd","frameBuffer","frame","_a","sent","serializeFrameWithLength","serializeFrame","lengthPrefixed","Buffer","allocUnsafe","copy","streamId","readInt32BE","typeAndFlags","readUInt16BE","type","flags","FrameTypes","SETUP","deserializeSetupFrame","PAYLOAD","deserializePayloadFrame","ERROR","deserializeErrorFrame","KEEPALIVE","deserializeKeepAliveFrame","REQUEST_FNF","deserializeRequestFnfFrame","REQUEST_RESPONSE","deserializeRequestResponseFrame","REQUEST_STREAM","deserializeRequestStreamFrame","REQUEST_CHANNEL","deserializeRequestChannelFrame","METADATA_PUSH","deserializeMetadataPushFrame","REQUEST_N","deserializeRequestNFrame","RESUME","deserializeResumeFrame","RESUME_OK","deserializeResumeOkFrame","CANCEL","deserializeCancelFrame","LEASE","deserializeLeaseFrame","serializeSetupFrame","serializePayloadFrame","serializeErrorFrame","serializeKeepAliveFrame","serializeRequestFrame","serializeRequestManyFrame","serializeMetadataPushFrame","serializeRequestNFrame","serializeResumeFrame","serializeResumeOkFrame","serializeCancelFrame","serializeLeaseFrame","sizeOfFrame","sizeOfSetupFrame","sizeOfPayloadFrame","sizeOfErrorFrame","sizeOfKeepAliveFrame","sizeOfRequestFrame","sizeOfRequestManyFrame","sizeOfMetadataPushFrame","sizeOfRequestNFrame","sizeOfResumeFrame","sizeOfResumeOkFrame","sizeOfCancelFrame","sizeOfLeaseFrame","SETUP_FIXED_SIZE","RESUME_TOKEN_LENGTH_SIZE","resumeTokenLength","resumeToken","byteLength","metadataMimeTypeLength","metadataMimeType","dataMimeTypeLength","dataMimeType","payloadLength","getPayloadLength","writeHeader","writeUInt16BE","majorVersion","minorVersion","keepAlive","lifetime","Flags","RESUME_ENABLE","write","writePayload","readInt16BE","toString","data","metadata","readPayload","ERROR_FIXED_SIZE","messageLength","message","code","KEEPALIVE_FIXED_SIZE","dataLength","lastReceivedPosition","LEASE_FIXED_SIZE","metaLength","ttl","requestCount","REQUEST_MANY_HEADER","requestN","REQUEST_N_HEADER","RESUME_FIXED_SIZE","serverPosition","clientPosition","RESUME_OK_FIXED_SIZE","writeInt32BE","hasMetadata","Deserializer","prototype"],"sources":["../src/Codecs.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}